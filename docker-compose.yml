version: '3.7'
services:
  #-> https://hub.docker.com/r/linuxserver/qbittorrent
  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - ${_HYPERION_QBITTORRENT_PORT_TCP_PUBLISHED}:${_HYPERION_QBITTORRENT_PORT_TCP_TARGET}
      - ${_HYPERION_QBITTORRENT_PORT_UDP_PUBLISHED}:${_HYPERION_QBITTORRENT_PORT_UDP_TARGET}/udp
    #  - ${_HYPERION_QBITTORRENT_PORT_HTTP_PUBLISHED}:${_HYPERION_QBITTORRENT_PORT_HTTP_TARGET}
    volumes:
      - ${_HYPERION_STORAGE_DATA}/qbittorrent/config:/config
      - ${_HYPERION_STORAGE_MULTIMEDIA}/downloads:/multimedia/downloads
    environment:
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
      - TZ=${_HYPERION_TIMEZONE}
      - WEBUI_PORT=${_HYPERION_QBITTORRENT_PORT_HTTP_PUBLISHED}
      #?- UMASK_SET=022
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=${_HYPERION_QBITTORRENT_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.qbittorrent-wan-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-wan-rtr.rule=Host(`${_HYPERION_QBITTORRENT_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.qbittorrent-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.qbittorrent-wan-rtr.middlewares=middlewares-rate-limit@file,chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.qbittorrent-wan-rtr.service=qbittorrent-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.qbittorrent-lan-rtr.entrypoints=http"
      - "traefik.http.routers.qbittorrent-lan-rtr.rule=Host(`${_HYPERION_QBITTORRENT_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.qbittorrent-lan-rtr.middlewares=middlewares-rate-limit@file,chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.qbittorrent-lan-rtr.service=qbittorrent-svc"
# Heimdall - Unified Frontend Alternative
# Putting all services behind Oragnizr slows things down.
  #-> https://hub.docker.com/r/linuxserver/heimdall/
  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_HEIMDALL_PORT_HTTP_PUBLISHED}:${_HYPERION_HEIMDALL_PORT_HTTP_TARGET}"
    volumes:
      - ${_HYPERION_STORAGE_DATA}/heimdall/config:/config
    environment:
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
      - TZ=${_HYPERION_TIMEZONE}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`${_HYPERION_HEIMDALL_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.heimdall-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=${_HYPERION_HEIMDALL_PORT_HTTP_TARGET}"
# Google OAuth - Single Sign On using OAuth 2.0
# https://hub.docker.com/r/thomseddon/traefik-forward-auth
# https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  #-> https://hub.docker.com/r/thomseddon/traefik-forward-auth/
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=${_HYPERION_SECRETS_OAUTH_GOOGLE_CLIENT_ID}
      - CLIENT_SECRET=${_HYPERION_SECRETS_OAUTH_GOOGLE_CLIENT_SECRET}
      - SECRET=${_HYPERION_SECRETS_OAUTH_SECRET}
      - COOKIE_DOMAIN=${_HYPERION_NETWORK_WAN_DOMAIN}
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.${_HYPERION_NETWORK_WAN_DOMAIN}:${_HYPERION_NETWORK_WAN_PORT_HTTPS}
      - URL_PATH=/_oauth
      - WHITELIST=${_HYPERION_SECRETS_OAUTH_WHITELIST_EMAIL}
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=${_HYPERION_OAUTH_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.oauth-wan-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-wan-rtr.rule=Host(`${_HYPERION_OAUTH_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.oauth-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.oauth-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.oauth-wan-rtr.service=oauth-svc"
  #-> https://hub.docker.com/r/portainer/portainer/
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_PORTAINER_PORT_HTTP_PUBLISHED}:${_HYPERION_PORTAINER_PORT_HTTP_TARGET}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${_HYPERION_STORAGE_DATA}/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=${_HYPERION_TIMEZONE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=${_HYPERION_PORTAINER_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.portainer-wan-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-wan-rtr.rule=Host(`${_HYPERION_PORTAINER_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.portainer-wan-rtr.tls=true"
      #-> WAN\Middlewares
      #- "traefik.http.routers.portainer-wan-rtr.middlewares=chain-no-auth@file" # No Authentication
      #- "traefik.http.routers.portainer-wan-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.portainer-wan-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      #-> WAN\HTTP Services
      - "traefik.http.routers.portainer-wan-rtr.service=portainer-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.portainer-lan-rtr.entrypoints=http"
      - "traefik.http.routers.portainer-lan-rtr.rule=Host(`${_HYPERION_PORTAINER_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.portainer-lan-rtr.middlewares=chain-no-auth@file" # No Authentication
      #- "traefik.http.routers.portainer-lan-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      #- "traefik.http.routers.portainer-lan-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      #-> LAN\HTTP Services
      - "traefik.http.routers.portainer-lan-rtr.service=portainer-svc"
# Traefik - Reverse Proxy
# Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600. 
# touch $USERDIR/docker/traefik/acme/acme.json
# chmod 600 $USERDIR/docker/traefik/acme/acme.json
# touch $USERDIR/docker/traefik/traefik.log
  #-> https://hub.docker.com/_/traefik/
  traefik:
    container_name: traefik
    image: traefik:chevrotin # the chevrotin tag refers to v2.2.x
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:${_HYPERION_NETWORK_WAN_PORT_HTTP}
      - --entryPoints.https.address=:${_HYPERION_NETWORK_WAN_PORT_HTTPS}
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      #- --entryPoints.traefik.address=:${_HYPERION_NETWORK_WAN_PORT_TRAEFIK}
      #- --api=true
      - --api.dashboard=true
      - --api.insecure=false
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/var/log/docker/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${_HYPERION_NETWORK_WAN_DOMAIN}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=${_HYPERION_SECRETS_CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      t2_proxy:
        #ipv4_address: 192.168.90.254 # You can specify a static IP
    #networks:
    #  - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
      - target: ${_HYPERION_NETWORK_PORT_HTTP_TARGET}
        published: ${_HYPERION_NETWORK_WAN_PORT_HTTP}
        protocol: tcp
        mode: host
      - target: ${_HYPERION_NETWORK_WAN_PORT_HTTPS}
        published: ${_HYPERION_NETWORK_PORT_HTTPS_TARGET}
        protocol: tcp
        mode: host
      #- target: ${_HYPERION_NETWORK_WAN_PORT_TRAEFIK}
      #  published: ${_HYPERION_NETWORK_WAN_PORT_TRAEFIK}
      #  protocol: tcp
      #  mode: host
    volumes:
      - ${_HYPERION_STORAGE_DATA}/traefik/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${_HYPERION_STORAGE_DATA}/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - ${_HYPERION_STORAGE_DATA}/traefik/traefik.log:/var/log/docker/traefik.log # for fail2ban - make sure to touch file before starting container
      - ${_HYPERION_STORAGE_DATA}/shared:/shared
    environment:
      - CF_API_EMAIL=${_HYPERION_SECRETS_CLOUDFLARE_EMAIL}
      - CF_API_KEY=${_HYPERION_SECRETS_CLOUDFLARE_API_KEY}
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
    labels:
      - "traefik.enable=true"
    
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.rule=Host(`${_HYPERION_TRAEFIK_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      #-> Enable the Traefik dashboard
      - "traefik.http.routers.traefik-rtr.service=api@internal"

      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=${_HYPERION_NETWORK_WAN_DOMAIN}"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${_HYPERION_NETWORK_WAN_DOMAIN}"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAIN" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAIN" # Pulls wildcard cert for second domain

      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=traefik-headers,middlewares-rate-limit@file" #,middlewares-rate-limit@file,rate-limit@file,oauth@file
      - "traefik.http.routers.traefik-rtr.middlewares=traefik-headers,middlewares-rate-limit@file,chain-oauth@file" #,middlewares-rate-limit@file,rate-limit@file,oauth@file
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolalloworiginlist=https://${_HYPERION_NETWORK_WAN_DOMAIN}"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.traefik-headers.headers.addvaryheader=true" 
      - "traefik.http.middlewares.traefik-headers.headers.allowedhosts=traefik.${_HYPERION_NETWORK_WAN_DOMAIN}" #:${_HYPERION_NETWORK_WAN_PORT_HTTPS}
      - "traefik.http.middlewares.traefik-headers.headers.hostsproxyheaders=X-Forwarded-Host"
      - "traefik.http.middlewares.traefik-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.${_HYPERION_NETWORK_WAN_DOMAIN}" #:${_HYPERION_NETWORK_WAN_PORT_HTTPS}
      - "traefik.http.middlewares.traefik-headers.headers.sslforcehost=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslproxyheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.traefik-headers.headers.stsseconds=63072000"
      - "traefik.http.middlewares.traefik-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.traefik-headers.headers.stspreload=true"
      - "traefik.http.middlewares.traefik-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.traefik-headers.headers.framedeny=true"
#      - "traefik.http.middlewares.traefik-headers.headers.customframeoptionsvalue=SAMEORIGIN" # This option overrides FrameDeny
      - "traefik.http.middlewares.traefik-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true"
#      - "traefik.http.middlewares.traefik-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; base-uri 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.referrerpolicy=same-origin"
      - "traefik.http.middlewares.traefik-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"
# Jackett - Torrent proxy
# Set url_base in Jackett settings if using PathPrefix
  #-> https://hub.docker.com/r/linuxserver/jackett/
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_JACKETT_PORT_HTTP_TARGET}:${_HYPERION_JACKETT_PORT_HTTP_TARGET}"
    volumes:
      - ${_HYPERION_STORAGE_DATA}/jackett/config:/config
      - ${_HYPERION_STORAGE_DATA}/shared:/shared
      #- $USERDIR/Downloads:/downloads
      #- "/etc/localtime:/etc/localtime:ro"
    environment:
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
      - TZ=${_HYPERION_TIMEZONE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=${_HYPERION_JACKETT_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.jackett-wan-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-wan-rtr.rule=Host(`${_HYPERION_JACKETT_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.jackett-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.jackett-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.jackett-wan-rtr.service=jackett-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.jackett-lan-rtr.entrypoints=http"
      - "traefik.http.routers.jackett-lan-rtr.rule=Host(`${_HYPERION_JACKETT_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.jackett-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.jackett-lan-rtr.service=jackett-svc"
# Ombi - Media Requests
  #-> https://hub.docker.com/r/linuxserver/ombi
  ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    restart: unless-stopped
    networks:
      - t2_proxy
    #ports:
    #  - "${_HYPERION_OMBI_PORT_HTTP_PUBLISHED}:${_HYPERION_OMBI_PORT_HTTP_TARGET}"
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${_HYPERION_STORAGE_DATA}/ombi/config:/config
      - ${_HYPERION_STORAGE_DATA}/shared:/shared
    environment:
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
      - TZ=${_HYPERION_TIMEZONE}
      #- BASE_URL=/ombi #optional
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.ombi-svc.loadbalancer.server.port=${_HYPERION_OMBI_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.ombi-wan-rtr.entrypoints=https"
      - "traefik.http.routers.ombi-wan-rtr.rule=Host(`${_HYPERION_OMBI_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.ombi-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.ombi-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.ombi-wan-rtr.service=ombi-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.ombi-lan-rtr.entrypoints=http"
      - "traefik.http.routers.ombi-lan-rtr.rule=Host(`${_HYPERION_OMBI_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.ombi-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.ombi-lan-rtr.service=ombi-svc"
# Plex - Media Server
  #-> https://hub.docker.com/r/plexinc/pms-docker
  plexms:
    image: plexinc/pms-docker:public
    container_name: plexms
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - ${_HYPERION_PLEXMS_PORT_HTTP_PUBLISHED}:${_HYPERION_PLEXMS_PORT_HTTP_TARGET}/tcp # PRIMARY_TCP
      - ${_HYPERION_PLEXMS_WEBTOOLS_PORT_HTTP_PUBLISHED}:${_HYPERION_PLEXMS_WEBTOOLS_PORT_HTTP_TARGET} # WebTools plugin
      - 3005:3005/tcp # COMPANION_TCP
      - 8324:8324/tcp # COMPANION_ROKU_TCP
      - 32469:32469/tcp # DLNA_TCP
      - 1900:1900/udp # DLNA_UDP #conflicts with xTeVe
      - 32410:32410/udp # NETWORK_DISCOVERY_1_UDP
      - 32412:32412/udp # NETWORK_DISCOVERY_2_UDP
      - 32413:32413/udp # NETWORK_DISCOVERY_3_UDP
      - 32414:32414/udp # NETWORK_DISCOVERY_4_UDP
    volumes:
      - ${_HYPERION_STORAGE_DATA}/plexms/config:/config
      - ${_HYPERION_STORAGE_TMP}/plexms/transcode:/transcode
      - ${_HYPERION_STORAGE_MULTIMEDIA}:/data
      - ${_HYPERION_STORAGE_DATA}/shared:/shared:ro
      #- ${_HYPERION_STORAGE_DATA}/acme-cert:/cert:ro
      #- /media:/nas
      #- /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM
    environment:
      - HOSTNAME=${_HYPERION_HOSTNAME}
      - TZ=${_HYPERION_TIMEZONE}
      - PLEX_UID=${_HYPERION_UID}
      - PLEX_GID=${_HYPERION_GID}
      #ADVERTISE_IP: http://$SERVER_IP:$PLEX_PORT/
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`${_HYPERION_PLEXMS_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.plexms-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=${_HYPERION_PLEXMS_PORT_HTTP_TARGET}"
  alertmanager:
    image: prom/alertmanager:v0.20.0
    container_name: alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    #depends_on:
    #  - cadvisor
    networks:
      - t2_proxy
    #  - monitor-net
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_ALERTMANAGER_PORT_HTTP_PUBLISHED}:${_HYPERION_ALERTMANAGER_PORT_HTTP_TARGET}"
    #expose:
    #  - ${_HYPERION_ALERTMANAGER_PORT_HTTP_TARGET}
    volumes:
      - ${_HYPERION_STORAGE_SRV_CONFIG}/alertmanager:/etc/alertmanager
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.alertmanager-svc.loadbalancer.server.port=${_HYPERION_ALERTMANAGER_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.alertmanager-wan-rtr.entrypoints=https"
      - "traefik.http.routers.alertmanager-wan-rtr.rule=Host(`${_HYPERION_ALERTMANAGER_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.alertmanager-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.alertmanager-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.alertmanager-wan-rtr.service=alertmanager-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.alertmanager-lan-rtr.entrypoints=http"
      - "traefik.http.routers.alertmanager-lan-rtr.rule=Host(`${_HYPERION_ALERTMANAGER_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.alertmanager-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.alertmanager-lan-rtr.service=alertmanager-svc"
    #-> https://hub.docker.com/r/google/cadvisor/
  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    restart: unless-stopped
    #depends_on:
    #- redis
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_CADVISOR_PORT_HTTP_PUBLISHED}:${_HYPERION_CADVISOR_PORT_HTTP_TARGET}"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
    #  - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    #environment:
    #  - PUID=${_HYPERION_UID}
    #  - PGID=${_HYPERION_GID}
    #  - TZ=${_HYPERION_TIMEZONE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.cadvisor-svc.loadbalancer.server.port=${_HYPERION_CADVISOR_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.cadvisor-wan-rtr.entrypoints=https"
      - "traefik.http.routers.cadvisor-wan-rtr.rule=Host(`${_HYPERION_CADVISOR_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.cadvisor-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.cadvisor-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.cadvisor-wan-rtr.service=cadvisor-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.cadvisor-lan-rtr.entrypoints=http"
      - "traefik.http.routers.cadvisor-lan-rtr.rule=Host(`${_HYPERION_CADVISOR_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.cadvisor-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.cadvisor-lan-rtr.service=cadvisor-svc"
# Grafana - Graphical data visualization for InfluxDB data
  #-> https://hub.docker.com/grafana/grafana/
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "${_HYPERION_UID}"
    depends_on:
    #  - influxdb
      - prometheus
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_GRAFANA_PORT_HTTP_PUBLISHED}:${_HYPERION_GRAFANA_PORT_HTTP_TARGET}"
    volumes:
      - grafana_data:/var/lib/grafana
      - ${_HYPERION_STORAGE_SRV_CONFIG}/grafana/provisioning:/etc/grafana/provisioning
    #  - ${_HYPERION_STORAGE_DATA}/grafana/var/lib:/var/lib/grafana
    #  - ${_HYPERION_STORAGE_DATA}/shared:/shared
    environment:
      - "GF_SERVER_ROOT_URL=https://grafana.hyperion.jekotia.net"
      - "GF_SECURITY_ADMIN_USER=${_HYPERION_SECRETS_GRAFANA_ADMIN_USER}"
      - "GF_SECURITY_ADMIN_PASSWORD=${_HYPERION_SECRETS_GRAFANA_ADMIN_PASSWORD}"
      - "GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
      - "GF_AUTH_ANONYMOUS_ENABLED=true"
      #- "GF_USERS_ALLOW_SIGN_UP=false"

    labels:
      - "traefik.enable=true"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=${_HYPERION_GRAFANA_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.grafana-wan-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-wan-rtr.rule=Host(`${_HYPERION_GRAFANA_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.grafana-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.grafana-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.grafana-wan-rtr.service=grafana-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.grafana-lan-rtr.entrypoints=http"
      - "traefik.http.routers.grafana-lan-rtr.rule=Host(`${_HYPERION_GRAFANA_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.grafana-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.grafana-lan-rtr.service=grafana-svc"
  #-> https://hub.docker.com/r/prom/node-exporter/
  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    #depends_on:
    #  - cadvisor
    networks:
      - t2_proxy
    #  - monitor-net
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_NODEEXPORTER_PORT_HTTP_PUBLISHED}:${_HYPERION_NODEEXPORTER_PORT_HTTP_TARGET}"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    #network_mode: host
    #labels:
    #  org.label-schema.group: "monitoring"

  #-> https://hub.docker.com/prom/prometheus/
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - cadvisor
    networks:
      - t2_proxy
    #  - monitor-net
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_PROMETHEUS_PORT_HTTP_PUBLISHED}:${_HYPERION_PROMETHEUS_PORT_HTTP_TARGET}"
    volumes:
      - ${_HYPERION_STORAGE_SRV_CONFIG}/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    #  - ${_HYPERION_STORAGE_DATA}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    #  - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    #  - ${_HYPERION_STORAGE_DATA}/prometheus/etc:/etc/prometheus
    #  - ${_HYPERION_STORAGE_DATA}/prometheus/data:/prometheus
    #  - ${_HYPERION_STORAGE_DATA}/prometheus/var/lib:/var/lib/prometheus
    #  - ${_HYPERION_STORAGE_DATA}/shared:/shared
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.prometheus-svc.loadbalancer.server.port=${_HYPERION_PROMETHEUS_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.prometheus-wan-rtr.entrypoints=https"
      - "traefik.http.routers.prometheus-wan-rtr.rule=Host(`${_HYPERION_PROMETHEUS_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.prometheus-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.prometheus-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.prometheus-wan-rtr.service=prometheus-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.prometheus-lan-rtr.entrypoints=http"
      - "traefik.http.routers.prometheus-lan-rtr.rule=Host(`${_HYPERION_PROMETHEUS_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.prometheus-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.prometheus-lan-rtr.service=prometheus-svc"
# Radarr - Movie management
# Set url_base in radarr settings if using PathPrefix
  #-> https://hub.docker.com/r/linuxserver/radarr
  radarr:
#    image: aront/radarr #for mp4_automator support
    image: linuxserver/radarr:preview
    container_name: radarr
    restart: unless-stopped
    depends_on:
      - jackett
      - qbittorrent
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_RADARR_PORT_HTTP_PUBLISHED}:${_HYPERION_RADARR_PORT_HTTP_TARGET}"
    volumes:
      - ${_HYPERION_STORAGE_DATA}/radarr/config:/config
      - ${_HYPERION_STORAGE_MULTIMEDIA}:/multimedia
      - ${_HYPERION_STORAGE_DATA}/shared:/shared
      #- /media:/nas
      #- "/etc/localtime:/etc/localtime:ro"
      #- $USERDIR/docker/shared/mp4_automator:/config_mp4_automator
    environment:
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
      - TZ=${_HYPERION_TIMEZONE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=${_HYPERION_RADARR_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.radarr-wan-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-wan-rtr.rule=Host(`${_HYPERION_RADARR_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.radarr-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.radarr-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.radarr-wan-rtr.service=radarr-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.radarr-lan-rtr.entrypoints=http"
      - "traefik.http.routers.radarr-lan-rtr.rule=Host(`${_HYPERION_RADARR_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.radarr-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.radarr-lan-rtr.service=radarr-svc"
# Sonarr - TV Shows management
# Set url_base in sonarr settings if using PathPrefix
  #-> https://hub.docker.com/r/linuxserver/sonarr
  sonarr:
#    image: aront/sonarr  #for mp4_automator support
    image: linuxserver/sonarr:preview
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      - jackett
      - qbittorrent
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
    #  - "${_HYPERION_SONARR_PORT_HTTP_PUBLISHED}:${_HYPERION_SONARR_PORT_HTTP_TARGET}"
    volumes:
      - ${_HYPERION_STORAGE_DATA}/sonarr/config:/config
      - ${_HYPERION_STORAGE_MULTIMEDIA}:/multimedia
      - ${_HYPERION_STORAGE_DATA}/shared:/shared
      #- /media:/nas
      #- "/etc/localtime:/etc/localtime:ro"
      #- $USERDIR/docker/shared/mp4_automator:/config_mp4_automator
    environment:
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
      - TZ=${_HYPERION_TIMEZONE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=${_HYPERION_SONARR_PORT_HTTP_TARGET}"

      #-> WAN\HTTP Routers
      - "traefik.http.routers.sonarr-wan-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-wan-rtr.rule=Host(`${_HYPERION_SONARR_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      - "traefik.http.routers.sonarr-wan-rtr.tls=true"
      #-> WAN\Middlewares
      - "traefik.http.routers.sonarr-wan-rtr.middlewares=chain-oauth@file"
      #-> WAN\HTTP Services
      - "traefik.http.routers.sonarr-wan-rtr.service=sonarr-svc"

      #-> LAN\HTTP Routers
      - "traefik.http.routers.sonarr-lan-rtr.entrypoints=http"
      - "traefik.http.routers.sonarr-lan-rtr.rule=Host(`${_HYPERION_SONARR_LAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_LAN_DOMAIN}`)"
      #-> LAN\Middlewares
      #- "traefik.http.routers.sonarr-lan-rtr.middlewares=chain-oauth@file"
      #-> LAN\HTTP Services
      - "traefik.http.routers.sonarr-lan-rtr.service=sonarr-svc"


########################### NETWORKS
# Create t2_proxy network
# docker network create t2_proxy
# Alternatively, you can specify the gateway and subnet to use
# docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 t2_proxy
# Subnet range 192.168.0.0/16 covers 192.168.0.0 to 192.168.255.255

networks:
  t2_proxy:
    #default:
    #  name: t2_proxy
  default:
    driver: bridge
  #monitor-net:
  #  driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}
