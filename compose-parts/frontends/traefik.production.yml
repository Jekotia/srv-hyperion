# Traefik - Reverse Proxy
# Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600. 
# touch $USERDIR/docker/traefik/acme/acme.json
# chmod 600 $USERDIR/docker/traefik/acme/acme.json
# touch $USERDIR/docker/traefik/traefik.log
services:
  #-> https://hub.docker.com/_/traefik/
  traefik:
    container_name: traefik
    image: traefik:chevrotin # the chevrotin tag refers to v2.2.x
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:${_HYPERION_NETWORK_WAN_PORT_HTTP}
      - --entryPoints.https.address=:${_HYPERION_NETWORK_WAN_PORT_HTTPS}
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      #- --entryPoints.traefik.address=:${_HYPERION_NETWORK_WAN_PORT_TRAEFIK}
      #- --api=true
      - --api.dashboard=true
      - --api.insecure=false
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/var/log/docker/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${_HYPERION_NETWORK_WAN_DOMAIN}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=${_HYPERION_SECRETS_CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      t2_proxy:
        #ipv4_address: 192.168.90.254 # You can specify a static IP
    #networks:
    #  - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
      - target: ${_HYPERION_NETWORK_PORT_HTTP_TARGET}
        published: ${_HYPERION_NETWORK_WAN_PORT_HTTP}
        protocol: tcp
        mode: host
      - target: ${_HYPERION_NETWORK_WAN_PORT_HTTPS}
        published: ${_HYPERION_NETWORK_PORT_HTTPS_TARGET}
        protocol: tcp
        mode: host
      #- target: ${_HYPERION_NETWORK_WAN_PORT_TRAEFIK}
      #  published: ${_HYPERION_NETWORK_WAN_PORT_TRAEFIK}
      #  protocol: tcp
      #  mode: host
    volumes:
      - ${_HYPERION_STORAGE_DATA}/traefik/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${_HYPERION_STORAGE_DATA}/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - ${_HYPERION_STORAGE_DATA}/traefik/traefik.log:/var/log/docker/traefik.log # for fail2ban - make sure to touch file before starting container
      - ${_HYPERION_STORAGE_DATA}/shared:/shared
    environment:
      - CF_API_EMAIL=${_HYPERION_SECRETS_CLOUDFLARE_EMAIL}
      - CF_API_KEY=${_HYPERION_SECRETS_CLOUDFLARE_API_KEY}
      - PUID=${_HYPERION_UID}
      - PGID=${_HYPERION_GID}
    labels:
      - "traefik.enable=true"
    
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.rule=Host(`${_HYPERION_TRAEFIK_WAN_DOMAIN_PREFIX}${_HYPERION_NETWORK_WAN_DOMAIN}`)"
      #-> Enable the Traefik dashboard
      - "traefik.http.routers.traefik-rtr.service=api@internal"

      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=${_HYPERION_NETWORK_WAN_DOMAIN}"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${_HYPERION_NETWORK_WAN_DOMAIN}"
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAIN" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAIN" # Pulls wildcard cert for second domain

      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=traefik-headers,middlewares-rate-limit@file" #,middlewares-rate-limit@file,rate-limit@file,oauth@file
      - "traefik.http.routers.traefik-rtr.middlewares=traefik-headers,middlewares-rate-limit@file,chain-oauth@file" #,middlewares-rate-limit@file,rate-limit@file,oauth@file
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolalloworiginlist=https://${_HYPERION_NETWORK_WAN_DOMAIN}"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.traefik-headers.headers.addvaryheader=true" 
      - "traefik.http.middlewares.traefik-headers.headers.allowedhosts=traefik.${_HYPERION_NETWORK_WAN_DOMAIN}" #:${_HYPERION_NETWORK_WAN_PORT_HTTPS}
      - "traefik.http.middlewares.traefik-headers.headers.hostsproxyheaders=X-Forwarded-Host"
      - "traefik.http.middlewares.traefik-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.${_HYPERION_NETWORK_WAN_DOMAIN}" #:${_HYPERION_NETWORK_WAN_PORT_HTTPS}
      - "traefik.http.middlewares.traefik-headers.headers.sslforcehost=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslproxyheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.traefik-headers.headers.stsseconds=63072000"
      - "traefik.http.middlewares.traefik-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.traefik-headers.headers.stspreload=true"
      - "traefik.http.middlewares.traefik-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.traefik-headers.headers.framedeny=true"
#      - "traefik.http.middlewares.traefik-headers.headers.customframeoptionsvalue=SAMEORIGIN" # This option overrides FrameDeny
      - "traefik.http.middlewares.traefik-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true"
#      - "traefik.http.middlewares.traefik-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; base-uri 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.referrerpolicy=same-origin"
      - "traefik.http.middlewares.traefik-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"
